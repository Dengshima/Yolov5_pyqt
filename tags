!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/dsm/codes/qt5_Detection/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	/p5.9.20210110.0/
1. Testing	algorithms/RmFog/README.md	/^### 1. Testing$/;"	S	section:GridDehazeNet""Quick Start
2. Training	algorithms/RmFog/README.md	/^### 2. Training$/;"	S	section:GridDehazeNet""Quick Start
BCEBlurWithLogitsLoss	algorithms/Yolov5/utils/utils.py	/^class BCEBlurWithLogitsLoss(nn.Module):$/;"	c
Bottleneck	algorithms/Yolov5/models/common.py	/^class Bottleneck(nn.Module):$/;"	c
BottleneckCSP	algorithms/Yolov5/models/common.py	/^class BottleneckCSP(nn.Module):$/;"	c
Cite	algorithms/RmFog/README.md	/^## Cite$/;"	s	chapter:GridDehazeNet
Concat	algorithms/Yolov5/models/common.py	/^class Concat(nn.Module):$/;"	c
Conv	algorithms/Yolov5/models/common.py	/^class Conv(nn.Module):$/;"	c
ConvPlus	algorithms/Yolov5/models/experimental.py	/^class ConvPlus(nn.Module):$/;"	c
DWConv	algorithms/Yolov5/models/common.py	/^def DWConv(c1, c2, k=1, s=1, act=True):$/;"	f
Detect	algorithms/Yolov5/models/yolo.py	/^class Detect(nn.Module):$/;"	c
DetectThread	yoloThreads.py	/^class DetectThread(QThread):$/;"	c
DownSample	algorithms/RmFog/model.py	/^class DownSample(nn.Module):$/;"	c
EnlightenWork	yoloThreads.py	/^class EnlightenWork(QObject):$/;"	c
F	algorithms/RmFog/model.py	/^import torch.nn.functional as F$/;"	I	nameref:module:torch.nn.functional
F	algorithms/RmFog/perceptual.py	/^import torch.nn.functional as F$/;"	I	nameref:module:torch.nn.functional
F	algorithms/RmFog/residual_dense_block.py	/^import torch.nn.functional as F$/;"	I	nameref:module:torch.nn.functional
F	algorithms/RmFog/train.py	/^import torch.nn.functional as F$/;"	I	nameref:module:torch.nn.functional
F	algorithms/RmFog/utils.py	/^import torch.nn.functional as F$/;"	I	nameref:module:torch.nn.functional
F	algorithms/Yolov5/Yolov5_train.py	/^import torch.nn.functional as F$/;"	I	nameref:module:torch.nn.functional
F	algorithms/Yolov5/train.py	/^import torch.nn.functional as F$/;"	I	nameref:module:torch.nn.functional
F	algorithms/Yolov5/utils/activations.py	/^import torch.nn.functional as F$/;"	I	nameref:module:torch.nn.functional
F	algorithms/Yolov5/utils/torch_utils.py	/^import torch.nn.functional as F$/;"	I	nameref:module:torch.nn.functional
F	algorithms/ZeroDCE/Myloss.py	/^import torch.nn.functional as F$/;"	I	nameref:module:torch.nn.functional
F	algorithms/ZeroDCE/dce_model.py	/^import torch.nn.functional as F$/;"	I	nameref:module:torch.nn.functional
Flatten	algorithms/Yolov5/models/common.py	/^class Flatten(nn.Module):$/;"	c
FocalLoss	algorithms/Yolov5/utils/utils.py	/^class FocalLoss(nn.Module):$/;"	c
Focus	algorithms/Yolov5/models/common.py	/^class Focus(nn.Module):$/;"	c
FogThread	yoloThreads.py	/^class FogThread(QThread):$/;"	c
GhostBottleneck	algorithms/Yolov5/models/experimental.py	/^class GhostBottleneck(nn.Module):$/;"	c
GhostConv	algorithms/Yolov5/models/experimental.py	/^class GhostConv(nn.Module):$/;"	c
GridDehazeNet	algorithms/RmFog/README.md	/^# GridDehazeNet$/;"	c
GridDehazeNet	algorithms/RmFog/model.py	/^class GridDehazeNet(nn.Module):$/;"	c
GridDehazeNet: Attention-Based Multi-Scale Network for Image Dehazing	algorithms/RmFog/README.md	/^### GridDehazeNet: Attention-Based Multi-Scale Network for Image Dehazing$/;"	S	chapter:GridDehazeNet
HardSwish	algorithms/Yolov5/utils/activations.py	/^class HardSwish(nn.Module):  # https:\/\/arxiv.org\/pdf\/1905.02244.pdf$/;"	c
Introduction	algorithms/RmFog/README.md	/^## Introduction$/;"	s	chapter:GridDehazeNet
L_TV	algorithms/ZeroDCE/Myloss.py	/^class L_TV(nn.Module):$/;"	c
L_color	algorithms/ZeroDCE/Myloss.py	/^class L_color(nn.Module):$/;"	c
L_exp	algorithms/ZeroDCE/Myloss.py	/^class L_exp(nn.Module):$/;"	c
L_spa	algorithms/ZeroDCE/Myloss.py	/^class L_spa(nn.Module):$/;"	c
LoadImages	algorithms/Yolov5/utils/datasets.py	/^class LoadImages:  # for inference$/;"	c
LoadImagesAndLabels	algorithms/Yolov5/utils/datasets.py	/^class LoadImagesAndLabels(Dataset):  # for training\/testing$/;"	c
LoadStreams	algorithms/Yolov5/utils/datasets.py	/^class LoadStreams:  # multiple IP or RTSP cameras$/;"	c
LoadWebcam	algorithms/Yolov5/utils/datasets.py	/^class LoadWebcam:  # for inference$/;"	c
LossNetwork	algorithms/RmFog/perceptual.py	/^class LossNetwork(torch.nn.Module):$/;"	c
MakeDense	algorithms/RmFog/residual_dense_block.py	/^class MakeDense(nn.Module):$/;"	c
MemoryEfficientMish	algorithms/Yolov5/utils/activations.py	/^class MemoryEfficientMish(nn.Module):$/;"	c
MemoryEfficientSwish	algorithms/Yolov5/utils/activations.py	/^class MemoryEfficientSwish(nn.Module):$/;"	c
Mish	algorithms/Yolov5/utils/activations.py	/^class Mish(nn.Module):  # https:\/\/github.com\/digantamisra98\/Mish$/;"	c
MishImplementation	algorithms/Yolov5/utils/activations.py	/^class MishImplementation(torch.autograd.Function):$/;"	c
MixConv2d	algorithms/Yolov5/models/experimental.py	/^class MixConv2d(nn.Module):$/;"	c
Model	algorithms/Yolov5/models/yolo.py	/^class Model(nn.Module):$/;"	c
ModelEMA	algorithms/Yolov5/utils/torch_utils.py	/^class ModelEMA:$/;"	c
MyWindow	main.py	/^class MyWindow(QMainWindow, Ui_MainWindow):$/;"	c
OutputThread	yoloThreads.py	/^class OutputThread(QThread):$/;"	c
Prerequisites	algorithms/RmFog/README.md	/^## Prerequisites$/;"	s	chapter:GridDehazeNet
Quick Start	algorithms/RmFog/README.md	/^## Quick Start$/;"	s	chapter:GridDehazeNet
RDB	algorithms/RmFog/residual_dense_block.py	/^class RDB(nn.Module):$/;"	c
RemoveFog	algorithms/RmFog/removefog.py	/^class RemoveFog():$/;"	c
SPP	algorithms/Yolov5/models/common.py	/^class SPP(nn.Module):$/;"	c
Sa_Loss	algorithms/ZeroDCE/Myloss.py	/^class Sa_Loss(nn.Module):$/;"	c
Sum	algorithms/Yolov5/models/experimental.py	/^class Sum(nn.Module):$/;"	c
Swish	algorithms/Yolov5/utils/activations.py	/^class Swish(nn.Module):$/;"	c
SwishImplementation	algorithms/Yolov5/utils/activations.py	/^class SwishImplementation(torch.autograd.Function):$/;"	c
TrainData	algorithms/RmFog/train_data.py	/^class TrainData(data.Dataset):$/;"	c
TrainWindow	ui/trainParasMain.py	/^class TrainWindow(QDialog, Ui_Dialog):$/;"	c
Ui_Dialog	ui/trainParasUI.py	/^class Ui_Dialog(object):$/;"	c
Ui_MainWindow	ui/mainUI.py	/^class Ui_MainWindow(object):$/;"	c
UpSample	algorithms/RmFog/model.py	/^class UpSample(nn.Module):$/;"	c
ValData	algorithms/RmFog/val_data.py	/^class ValData(data.Dataset):$/;"	c
_	algorithms/Yolov5/models/onnx_export.py	/^    _ = model(img)  # dry run$/;"	v
_	algorithms/Yolov5/test.py	/^                r, _, t = test(opt.data, weights, opt.batch_size, i, opt.conf_thres, opt.iou_thr/;"	v
__getitem__	algorithms/RmFog/train_data.py	/^    def __getitem__(self, index):$/;"	m	class:TrainData
__getitem__	algorithms/RmFog/val_data.py	/^    def __getitem__(self, index):$/;"	m	class:ValData
__getitem__	algorithms/Yolov5/utils/datasets.py	/^    def __getitem__(self, index):$/;"	m	class:LoadImagesAndLabels
__getitem__	algorithms/ZeroDCE/dataloader.py	/^	def __getitem__(self, index):$/;"	m	class:lowlight_loader
__init__	algorithms/RmFog/model.py	/^    def __init__(self, in_channels, kernel_size=3, stride=2):$/;"	m	class:DownSample
__init__	algorithms/RmFog/model.py	/^    def __init__(self, in_channels, kernel_size=3, stride=2):$/;"	m	class:UpSample
__init__	algorithms/RmFog/model.py	/^    def __init__(self, in_channels=3, depth_rate=16, kernel_size=3, stride=2, height=3, width=6,/;"	m	class:GridDehazeNet
__init__	algorithms/RmFog/perceptual.py	/^    def __init__(self, vgg_model):$/;"	m	class:LossNetwork
__init__	algorithms/RmFog/removefog.py	/^    def __init__(self, paths):$/;"	m	class:RemoveFog
__init__	algorithms/RmFog/residual_dense_block.py	/^    def __init__(self, in_channels, growth_rate, kernel_size=3):$/;"	m	class:MakeDense
__init__	algorithms/RmFog/residual_dense_block.py	/^    def __init__(self, in_channels, num_dense_layer, growth_rate):$/;"	m	class:RDB
__init__	algorithms/RmFog/train_data.py	/^    def __init__(self, crop_size, train_data_dir):$/;"	m	class:TrainData
__init__	algorithms/RmFog/val_data.py	/^    def __init__(self, val_data_dir):$/;"	m	class:ValData
__init__	algorithms/Yolov5/models/common.py	/^    def __init__(self, c1, c2, k=(5, 9, 13)):$/;"	m	class:SPP
__init__	algorithms/Yolov5/models/common.py	/^    def __init__(self, c1, c2, k=1):$/;"	m	class:Focus
__init__	algorithms/Yolov5/models/common.py	/^    def __init__(self, c1, c2, k=1, s=1, g=1, act=True):  # ch_in, ch_out, kernel, stride, group/;"	m	class:Conv
__init__	algorithms/Yolov5/models/common.py	/^    def __init__(self, c1, c2, n=1, shortcut=True, g=1, e=0.5):  # ch_in, ch_out, number, shortc/;"	m	class:BottleneckCSP
__init__	algorithms/Yolov5/models/common.py	/^    def __init__(self, c1, c2, shortcut=True, g=1, e=0.5):  # ch_in, ch_out, shortcut, groups, e/;"	m	class:Bottleneck
__init__	algorithms/Yolov5/models/common.py	/^    def __init__(self, dimension=1):$/;"	m	class:Concat
__init__	algorithms/Yolov5/models/experimental.py	/^    def __init__(self, c1, c2, k, s):$/;"	m	class:GhostBottleneck
__init__	algorithms/Yolov5/models/experimental.py	/^    def __init__(self, c1, c2, k=(1, 3), s=1, equal_ch=True):$/;"	m	class:MixConv2d
__init__	algorithms/Yolov5/models/experimental.py	/^    def __init__(self, c1, c2, k=1, s=1, g=1, act=True):  # ch_in, ch_out, kernel, stride, group/;"	m	class:GhostConv
__init__	algorithms/Yolov5/models/experimental.py	/^    def __init__(self, c1, c2, k=3, s=1, g=1, bias=True):  # ch_in, ch_out, kernel, stride, grou/;"	m	class:ConvPlus
__init__	algorithms/Yolov5/models/experimental.py	/^    def __init__(self, n, weight=False):  # n: number of inputs$/;"	m	class:Sum
__init__	algorithms/Yolov5/models/yolo.py	/^    def __init__(self, model_cfg='yolov5s.yaml', ch=3, nc=None):  # model, input channels, numbe/;"	m	class:Model
__init__	algorithms/Yolov5/models/yolo.py	/^    def __init__(self, nc=80, anchors=()):  # detection layer$/;"	m	class:Detect
__init__	algorithms/Yolov5/utils/datasets.py	/^    def __init__(self, path, img_size=640):$/;"	m	class:LoadImages
__init__	algorithms/Yolov5/utils/datasets.py	/^    def __init__(self, path, img_size=640, batch_size=16, augment=False, hyp=None, rect=False, i/;"	m	class:LoadImagesAndLabels
__init__	algorithms/Yolov5/utils/datasets.py	/^    def __init__(self, pipe=0, img_size=640):$/;"	m	class:LoadWebcam
__init__	algorithms/Yolov5/utils/datasets.py	/^    def __init__(self, sources='streams.txt', img_size=640):$/;"	m	class:LoadStreams
__init__	algorithms/Yolov5/utils/torch_utils.py	/^    def __init__(self, model, decay=0.9999, device=''):$/;"	m	class:ModelEMA
__init__	algorithms/Yolov5/utils/utils.py	/^    def __init__(self, alpha=0.05):$/;"	m	class:BCEBlurWithLogitsLoss
__init__	algorithms/Yolov5/utils/utils.py	/^    def __init__(self, loss_fcn, gamma=1.5, alpha=0.25):$/;"	m	class:FocalLoss
__init__	algorithms/ZeroDCE/Myloss.py	/^    def __init__(self):$/;"	m	class:L_color
__init__	algorithms/ZeroDCE/Myloss.py	/^    def __init__(self):$/;"	m	class:L_spa
__init__	algorithms/ZeroDCE/Myloss.py	/^    def __init__(self):$/;"	m	class:Sa_Loss
__init__	algorithms/ZeroDCE/Myloss.py	/^    def __init__(self):$/;"	m	class:perception_loss
__init__	algorithms/ZeroDCE/Myloss.py	/^    def __init__(self,TVLoss_weight=1):$/;"	m	class:L_TV
__init__	algorithms/ZeroDCE/Myloss.py	/^    def __init__(self,patch_size,mean_val):$/;"	m	class:L_exp
__init__	algorithms/ZeroDCE/dataloader.py	/^	def __init__(self, lowlight_images_path):$/;"	m	class:lowlight_loader
__init__	algorithms/ZeroDCE/dce_model.py	/^	def __init__(self):$/;"	m	class:enhance_net_nopool
__init__	main.py	/^    def __init__(self, parent=None):$/;"	m	class:MyWindow
__init__	ui/trainParasMain.py	/^    def __init__(self, parent=None):$/;"	m	class:TrainWindow
__init__	yoloThreads.py	/^    def __init__(self, data=None, parent=None):$/;"	m	class:DetectThread
__init__	yoloThreads.py	/^    def __init__(self, data=None, parent=None):$/;"	m	class:EnlightenWork
__init__	yoloThreads.py	/^    def __init__(self, data=None, parent=None):$/;"	m	class:FogThread
__init__	yoloThreads.py	/^    def __init__(self, data=None, parent=None):$/;"	m	class:OutputThread
__iter__	algorithms/Yolov5/utils/datasets.py	/^    def __iter__(self):$/;"	m	class:LoadImages
__iter__	algorithms/Yolov5/utils/datasets.py	/^    def __iter__(self):$/;"	m	class:LoadStreams
__iter__	algorithms/Yolov5/utils/datasets.py	/^    def __iter__(self):$/;"	m	class:LoadWebcam
__len__	algorithms/RmFog/train_data.py	/^    def __len__(self):$/;"	m	class:TrainData
__len__	algorithms/RmFog/val_data.py	/^    def __len__(self):$/;"	m	class:ValData
__len__	algorithms/Yolov5/utils/datasets.py	/^    def __len__(self):$/;"	m	class:LoadImages
__len__	algorithms/Yolov5/utils/datasets.py	/^    def __len__(self):$/;"	m	class:LoadImagesAndLabels
__len__	algorithms/Yolov5/utils/datasets.py	/^    def __len__(self):$/;"	m	class:LoadStreams
__len__	algorithms/Yolov5/utils/datasets.py	/^    def __len__(self):$/;"	m	class:LoadWebcam
__len__	algorithms/ZeroDCE/dataloader.py	/^	def __len__(self):$/;"	m	class:lowlight_loader
__next__	algorithms/Yolov5/utils/datasets.py	/^    def __next__(self):$/;"	m	class:LoadImages
__next__	algorithms/Yolov5/utils/datasets.py	/^    def __next__(self):$/;"	m	class:LoadStreams
__next__	algorithms/Yolov5/utils/datasets.py	/^    def __next__(self):$/;"	m	class:LoadWebcam
_initialize_biases	algorithms/Yolov5/models/yolo.py	/^    def _initialize_biases(self, cf=None):  # initialize biases into Detect(), cf is class frequ/;"	m	class:Model
_make_grid	algorithms/Yolov5/models/yolo.py	/^    def _make_grid(nx=20, ny=20):$/;"	m	class:Detect
_print_biases	algorithms/Yolov5/models/yolo.py	/^    def _print_biases(self):$/;"	m	class:Model
addTableRow	funlibs.py	/^def addTableRow(table, row_data):$/;"	f
adjust_learning_rate	algorithms/RmFog/utils.py	/^def adjust_learning_rate(optimizer, epoch, category, lr_decay=0.5):$/;"	f
ap_per_class	algorithms/Yolov5/utils/utils.py	/^def ap_per_class(tp, conf, pred_cls, target_cls):$/;"	f
app	main.py	/^    app = QApplication(sys.argv)$/;"	v
apply_classifier	algorithms/Yolov5/utils/utils.py	/^def apply_classifier(x, model, img, im0):$/;"	f
args	algorithms/RmFog/test.py	/^args = parser.parse_args()$/;"	v
args	algorithms/RmFog/train.py	/^args = parser.parse_args()$/;"	v
attempt_download	algorithms/Yolov5/utils/google_utils.py	/^def attempt_download(weights):$/;"	f
augment_hsv	algorithms/Yolov5/utils/datasets.py	/^def augment_hsv(img, hgain=0.5, sgain=0.5, vgain=0.5):$/;"	f
backward	algorithms/Yolov5/utils/activations.py	/^    def backward(ctx, grad_output):$/;"	m	class:MishImplementation
backward	algorithms/Yolov5/utils/activations.py	/^    def backward(ctx, grad_output):$/;"	m	class:SwishImplementation
batch_size	algorithms/Yolov5/Yolov5_train.py	/^    batch_size = 2$/;"	v
bbox_ioa	algorithms/Yolov5/utils/datasets.py	/^    def bbox_ioa(box1, box2):$/;"	f	function:cutout	file:
bbox_iou	algorithms/Yolov5/utils/utils.py	/^def bbox_iou(box1, box2, x1y1x2y2=True, GIoU=False, DIoU=False, CIoU=False):$/;"	f
best	algorithms/Yolov5/train.py	/^best = wdir + 'best.pt'$/;"	v
box_area	algorithms/Yolov5/utils/utils.py	/^    def box_area(box):$/;"	f	function:box_iou	file:
box_iou	algorithms/Yolov5/utils/utils.py	/^def box_iou(box1, box2):$/;"	f
build_dir	setup.py	/^build_dir = "build"$/;"	v
build_targets	algorithms/Yolov5/utils/utils.py	/^def build_targets(p, targets, model):$/;"	f
build_tmp_dir	setup.py	/^build_tmp_dir = build_dir + "\/temp"$/;"	v
butter_lowpass	algorithms/Yolov5/utils/utils.py	/^    def butter_lowpass(cutoff, fs, order):$/;"	f	function:butter_lowpass_filtfilt	file:
butter_lowpass_filtfilt	algorithms/Yolov5/utils/utils.py	/^def butter_lowpass_filtfilt(data, cutoff=1500, fs=50000, order=5):$/;"	f
cancel	ui/trainParasMain.py	/^    def cancel(self):$/;"	m	class:TrainWindow
category	algorithms/RmFog/test.py	/^category = args.category$/;"	v
category	algorithms/RmFog/train.py	/^category = args.category$/;"	v
changemodel	main.py	/^    def changemodel(self, model_weight):$/;"	m	class:MyWindow
changetrain	main.py	/^    def changetrain(self):$/;"	m	class:MyWindow
changevalue	ui/trainParasMain.py	/^    def changevalue(self):$/;"	m	class:TrainWindow
check_anchor_order	algorithms/Yolov5/utils/utils.py	/^def check_anchor_order(m):$/;"	f
check_anchors	algorithms/Yolov5/utils/utils.py	/^def check_anchors(dataset, model, thr=4.0, imgsz=640):$/;"	f
check_file	algorithms/Yolov5/utils/utils.py	/^def check_file(file):$/;"	f
check_git_status	algorithms/Yolov5/utils/utils.py	/^def check_git_status():$/;"	f
check_img_size	algorithms/Yolov5/utils/utils.py	/^def check_img_size(img_size, s=32):$/;"	f
choosemodel	main.py	/^    def choosemodel(self):$/;"	m	class:MyWindow
clip_coords	algorithms/Yolov5/utils/utils.py	/^def clip_coords(boxes, img_shape):$/;"	f
closeEvent	main.py	/^    def closeEvent(self, event):$/;"	m	class:MyWindow
coco80_to_coco91_class	algorithms/Yolov5/utils/utils.py	/^def coco80_to_coco91_class():  # converts 80-index (val2014) to 91-index (paper)$/;"	f
coco_class_count	algorithms/Yolov5/utils/utils.py	/^def coco_class_count(path='..\/coco\/labels\/train2014\/'):$/;"	f
coco_only_people	algorithms/Yolov5/utils/utils.py	/^def coco_only_people(path='..\/coco\/labels\/train2017\/'):  # from utils.utils import *; coco_o/;"	f
coco_single_class_labels	algorithms/Yolov5/utils/utils.py	/^def coco_single_class_labels(path='..\/coco\/labels\/train2014\/', label_class=43):$/;"	f
collate_fn	algorithms/Yolov5/utils/datasets.py	/^    def collate_fn(batch):$/;"	m	class:LoadImagesAndLabels
compute_ap	algorithms/Yolov5/utils/utils.py	/^def compute_ap(recall, precision):$/;"	f
compute_loss	algorithms/Yolov5/utils/utils.py	/^def compute_loss(p, targets, model):  # predictions, targets, model$/;"	f
concat	main.py	/^    def concat(self):$/;"	m	class:MyWindow
concat_image	funlibs.py	/^def concat_image(image_names, colums, rows, overlap_h=0, overlap_v=0):$/;"	f
config	algorithms/ZeroDCE/lowlight_train.py	/^    config = parser.parse_args()$/;"	v
confirm	ui/trainParasMain.py	/^    def confirm(self):$/;"	m	class:TrainWindow
convert_images2bmp	algorithms/Yolov5/utils/datasets.py	/^def convert_images2bmp():  # from utils.datasets import *; convert_images2bmp()$/;"	f
create	algorithms/Yolov5/hubconf.py	/^def create(name, pretrained, channels, classes):$/;"	f
create_dataloader	algorithms/Yolov5/utils/datasets.py	/^def create_dataloader(path, imgsz, batch_size, stride, opt, hyp=None, augment=False, cache=False/;"	f
create_folder	algorithms/Yolov5/utils/datasets.py	/^def create_folder(path='.\/new_folder'):$/;"	f
create_pretrained	algorithms/Yolov5/utils/utils.py	/^def create_pretrained(f='weights\/best.pt', s='weights\/pretrained.pt'):  # from utils.utils imp/;"	f
crop_images_random	algorithms/Yolov5/utils/utils.py	/^def crop_images_random(path='..\/images\/', scale=0.50):  # from utils.utils import *; crop_imag/;"	f
crop_size	algorithms/RmFog/train.py	/^crop_size = args.crop_size$/;"	v
cropimage	main.py	/^    def cropimage(self):$/;"	m	class:MyWindow
cropimage_overlap	funlibs.py	/^def cropimage_overlap(origin, colums, rows, save_path, h=0, v=0):$/;"	f
cudnn	algorithms/Yolov5/Yolov5_detect.py	/^import torch.backends.cudnn as cudnn$/;"	I	nameref:module:torch.backends.cudnn
cudnn	algorithms/Yolov5/detect.py	/^import torch.backends.cudnn as cudnn$/;"	I	nameref:module:torch.backends.cudnn
cudnn	algorithms/Yolov5/utils/torch_utils.py	/^import torch.backends.cudnn as cudnn$/;"	I	nameref:module:torch.backends.cudnn
cudnn	algorithms/ZeroDCE/lowlight_test.py	/^import torch.backends.cudnn as cudnn$/;"	I	nameref:module:torch.backends.cudnn
cudnn	algorithms/ZeroDCE/lowlight_train.py	/^import torch.backends.cudnn as cudnn$/;"	I	nameref:module:torch.backends.cudnn
curr_dir	setup.py	/^curr_dir = os.path.abspath('.')$/;"	v
cutout	algorithms/Yolov5/utils/datasets.py	/^def cutout(image, labels):$/;"	f
data	algorithms/RmFog/train_data.py	/^import torch.utils.data as data$/;"	I	nameref:module:torch.utils.data
data	algorithms/RmFog/val_data.py	/^import torch.utils.data as data$/;"	I	nameref:module:torch.utils.data
data	algorithms/ZeroDCE/dataloader.py	/^import torch.utils.data as data$/;"	I	nameref:module:torch.utils.data
datasetcfg	algorithms/Yolov5/Yolov5_train.py	/^    datasetcfg = 'data\/coco128.yaml'$/;"	v
default	main.py	/^    def default(self):$/;"	m	class:MyWindow
dehaze	algorithms/RmFog/train.py	/^        dehaze = net(haze)$/;"	v
delete_c	setup.py	/^def delete_c(path='.', excepts=(setup_file,)):$/;"	f
dependencies	algorithms/Yolov5/hubconf.py	/^dependencies = ['torch', 'yaml']$/;"	v
detect	algorithms/Yolov5/Yolov5_detect.py	/^def detect(source_image, model_weight, save_img=False):$/;"	f
detect	algorithms/Yolov5/detect.py	/^def detect(save_img=False):$/;"	f
detect_result	main.py	/^    def detect_result(self, result):$/;"	m	class:MyWindow
detection	main.py	/^    def detection(self):$/;"	m	class:MyWindow
device	algorithms/RmFog/test.py	/^device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")$/;"	v
device	algorithms/RmFog/train.py	/^device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")$/;"	v
device	algorithms/Yolov5/models/yolo.py	/^    device = torch_utils.select_device(opt.device)$/;"	v
device	algorithms/Yolov5/train.py	/^    device = torch_utils.select_device(opt.device, apex=mixed_precision, batch_size=opt.batch_si/;"	v
device_ids	algorithms/RmFog/test.py	/^device_ids = [Id for Id in range(torch.cuda.device_count())]$/;"	v
device_ids	algorithms/RmFog/train.py	/^device_ids = [Id for Id in range(torch.cuda.device_count())]$/;"	v
dist	algorithms/Yolov5/Yolov5_train.py	/^import torch.distributed as dist$/;"	I	nameref:module:torch.distributed
dist	algorithms/Yolov5/train.py	/^import torch.distributed as dist$/;"	I	nameref:module:torch.distributed
end_time	algorithms/RmFog/test.py	/^end_time = time.time() - start_time$/;"	v
enhance_net_nopool	algorithms/ZeroDCE/dce_model.py	/^class enhance_net_nopool(nn.Module):$/;"	c
enlighten	main.py	/^    def enlighten(self):$/;"	m	class:MyWindow
enlighten_finished	main.py	/^    def enlighten_finished(self):$/;"	m	class:MyWindow
epochs	algorithms/Yolov5/Yolov5_train.py	/^    epochs = 100$/;"	v
exif_size	algorithms/Yolov5/utils/datasets.py	/^def exif_size(img):$/;"	f
exitprogram	main.py	/^    def exitprogram(self):$/;"	m	class:MyWindow
f	algorithms/Yolov5/models/onnx_export.py	/^    f = opt.weights.replace('.pt', '.onnx')  # onnx filename$/;"	v
f	algorithms/Yolov5/test.py	/^            f = 'study_%s_%s.txt' % (Path(opt.data).stem, Path(weights).stem)  # filename to sav/;"	v
f	algorithms/Yolov5/train.py	/^f = glob.glob('hyp*.txt')$/;"	v
file_new	algorithms/RmFog/pre.py	/^        file_new = file[:-4] + '_1' + file[-4:]$/;"	v
find_modules	algorithms/Yolov5/utils/torch_utils.py	/^def find_modules(model, mclass=nn.Conv2d):$/;"	f
finished	yoloThreads.py	/^    finished = pyqtSignal()$/;"	v	class:EnlightenWork
finished	yoloThreads.py	/^    finished = pyqtSignal()$/;"	v	class:FogThread
finished	yoloThreads.py	/^    finished = pyqtSignal(list)$/;"	v	class:DetectThread
fitness	algorithms/Yolov5/utils/utils.py	/^    def fitness(k):  # mutation fitness$/;"	f	function:kmean_anchors	file:
fitness	algorithms/Yolov5/utils/utils.py	/^def fitness(x):$/;"	f
forward	algorithms/RmFog/model.py	/^    def forward(self, x):$/;"	m	class:DownSample
forward	algorithms/RmFog/model.py	/^    def forward(self, x):$/;"	m	class:GridDehazeNet
forward	algorithms/RmFog/model.py	/^    def forward(self, x, output_size):$/;"	m	class:UpSample
forward	algorithms/RmFog/perceptual.py	/^    def forward(self, dehaze, gt):$/;"	m	class:LossNetwork
forward	algorithms/RmFog/residual_dense_block.py	/^    def forward(self, x):$/;"	m	class:MakeDense
forward	algorithms/RmFog/residual_dense_block.py	/^    def forward(self, x):$/;"	m	class:RDB
forward	algorithms/Yolov5/models/common.py	/^    def forward(self, x):  # x(b,c,w,h) -> y(b,4c,w\/2,h\/2)$/;"	m	class:Focus
forward	algorithms/Yolov5/models/common.py	/^    def forward(self, x):$/;"	m	class:Bottleneck
forward	algorithms/Yolov5/models/common.py	/^    def forward(self, x):$/;"	m	class:BottleneckCSP
forward	algorithms/Yolov5/models/common.py	/^    def forward(self, x):$/;"	m	class:Concat
forward	algorithms/Yolov5/models/common.py	/^    def forward(self, x):$/;"	m	class:Conv
forward	algorithms/Yolov5/models/common.py	/^    def forward(self, x):$/;"	m	class:Flatten
forward	algorithms/Yolov5/models/common.py	/^    def forward(self, x):$/;"	m	class:SPP
forward	algorithms/Yolov5/models/experimental.py	/^    def forward(self, x):$/;"	m	class:ConvPlus
forward	algorithms/Yolov5/models/experimental.py	/^    def forward(self, x):$/;"	m	class:GhostBottleneck
forward	algorithms/Yolov5/models/experimental.py	/^    def forward(self, x):$/;"	m	class:GhostConv
forward	algorithms/Yolov5/models/experimental.py	/^    def forward(self, x):$/;"	m	class:MixConv2d
forward	algorithms/Yolov5/models/experimental.py	/^    def forward(self, x):$/;"	m	class:Sum
forward	algorithms/Yolov5/models/yolo.py	/^    def forward(self, x):$/;"	m	class:Detect
forward	algorithms/Yolov5/models/yolo.py	/^    def forward(self, x, augment=False, profile=False):$/;"	m	class:Model
forward	algorithms/Yolov5/utils/activations.py	/^    def forward(ctx, x):$/;"	m	class:MishImplementation
forward	algorithms/Yolov5/utils/activations.py	/^    def forward(ctx, x):$/;"	m	class:SwishImplementation
forward	algorithms/Yolov5/utils/activations.py	/^    def forward(x):$/;"	m	class:HardSwish
forward	algorithms/Yolov5/utils/activations.py	/^    def forward(x):$/;"	m	class:MemoryEfficientMish
forward	algorithms/Yolov5/utils/activations.py	/^    def forward(x):$/;"	m	class:MemoryEfficientSwish
forward	algorithms/Yolov5/utils/activations.py	/^    def forward(x):$/;"	m	class:Mish
forward	algorithms/Yolov5/utils/activations.py	/^    def forward(x):$/;"	m	class:Swish
forward	algorithms/Yolov5/utils/utils.py	/^    def forward(self, pred, true):$/;"	m	class:BCEBlurWithLogitsLoss
forward	algorithms/Yolov5/utils/utils.py	/^    def forward(self, pred, true):$/;"	m	class:FocalLoss
forward	algorithms/ZeroDCE/Myloss.py	/^    def forward(self, org , enhance ):$/;"	m	class:L_spa
forward	algorithms/ZeroDCE/Myloss.py	/^    def forward(self, x ):$/;"	m	class:L_color
forward	algorithms/ZeroDCE/Myloss.py	/^    def forward(self, x ):$/;"	m	class:L_exp
forward	algorithms/ZeroDCE/Myloss.py	/^    def forward(self, x ):$/;"	m	class:Sa_Loss
forward	algorithms/ZeroDCE/Myloss.py	/^    def forward(self, x):$/;"	m	class:perception_loss
forward	algorithms/ZeroDCE/Myloss.py	/^    def forward(self,x):$/;"	m	class:L_TV
forward	algorithms/ZeroDCE/dce_model.py	/^	def forward(self, x):$/;"	m	class:enhance_net_nopool
forward_once	algorithms/Yolov5/models/yolo.py	/^    def forward_once(self, x, profile=False):$/;"	m	class:Model
full_file	algorithms/RmFog/pre.py	/^        full_file = os.path.join(path, file)$/;"	v
fuse	algorithms/Yolov5/models/yolo.py	/^    def fuse(self):  # fuse model Conv2d() + BatchNorm2d() layers$/;"	m	class:Model
fuse_conv_and_bn	algorithms/Yolov5/utils/torch_utils.py	/^def fuse_conv_and_bn(conv, bn):$/;"	f
fuseforward	algorithms/Yolov5/models/common.py	/^    def fuseforward(self, x):$/;"	m	class:Conv
g	algorithms/Yolov5/train.py	/^                g = np.array([1, 1, 1, 1, 1, 1, 1, 0, .1, 1, 0, 1, 1, 1, 1, 1, 1, 1])  # gains$/;"	v
gdrive_download	algorithms/Yolov5/utils/google_utils.py	/^def gdrive_download(id='1HaXkef9z6y5l4vUnCYgdmEAj61c6bfWO', name='coco.zip'):$/;"	f
get_images	algorithms/RmFog/train_data.py	/^    def get_images(self, index):$/;"	m	class:TrainData
get_images	algorithms/RmFog/val_data.py	/^    def get_images(self, index):$/;"	m	class:ValData
get_py	setup.py	/^def get_py(base_path=os.path.abspath('.'), parent_path='', name = '', excepts=(), copyOther=Fals/;"	f
growth_rate	algorithms/RmFog/test.py	/^growth_rate = args.growth_rate$/;"	v
growth_rate	algorithms/RmFog/train.py	/^growth_rate = args.growth_rate$/;"	v
gt	algorithms/RmFog/train.py	/^        gt = gt.to(device)$/;"	v
gt	algorithms/RmFog/train.py	/^        haze, gt = train_data$/;"	v
haze	algorithms/RmFog/train.py	/^        haze = haze.to(device)$/;"	v
haze	algorithms/RmFog/train.py	/^        haze, gt = train_data$/;"	v
hazy	algorithms/RmFog/removefog.py	/^    def hazy(self):$/;"	m	class:RemoveFog
help_url	algorithms/Yolov5/utils/datasets.py	/^help_url = 'https:\/\/github.com\/ultralytics\/yolov5\/wiki\/Train-Custom-Data'$/;"	v
hex2rgb	algorithms/Yolov5/utils/utils.py	/^    hex2rgb = lambda h: tuple(int(h[1 + i:1 + i + 2], 16) for i in (0, 2, 4))$/;"	f	function:plot_images	file:
hist2d	algorithms/Yolov5/utils/utils.py	/^    def hist2d(x, y, n=100):$/;"	f	function:plot_labels	file:
hyp	algorithms/Yolov5/train.py	/^hyp = {'lr0': 0.01,  # initial learning rate (SGD=1E-2, Adam=1E-3)$/;"	v
imagelist2folder	algorithms/Yolov5/utils/datasets.py	/^def imagelist2folder(path='data\/coco_64img.txt'):  # from utils.datasets import *; imagelist2fo/;"	f
img	algorithms/Yolov5/models/onnx_export.py	/^    img = torch.zeros((opt.batch_size, 3, *opt.img_size))  # image size, (1, 3, 320, 192) iDetec/;"	v
img_formats	algorithms/Yolov5/utils/datasets.py	/^img_formats = ['.bmp', '.jpg', '.jpeg', '.png', '.tif', '.dng']$/;"	v
init_dir	funlibs.py	/^def init_dir(dir_path):$/;"	f
init_seeds	algorithms/Yolov5/utils/torch_utils.py	/^def init_seeds(seed=0):$/;"	f
init_seeds	algorithms/Yolov5/utils/utils.py	/^def init_seeds(seed=0):$/;"	f
initialize_weights	algorithms/Yolov5/utils/torch_utils.py	/^def initialize_weights(model):$/;"	f
judge	yoloThreads.py	/^    judge = pyqtSignal()$/;"	v	class:OutputThread
judge_thread	main.py	/^    def judge_thread(self):$/;"	m	class:MyWindow
keys	algorithms/Yolov5/train.py	/^            keys = ['lr0', 'iou_t', 'momentum', 'weight_decay', 'hsv_s', 'hsv_v', 'translate', '/;"	v
kmean_anchors	algorithms/Yolov5/utils/utils.py	/^def kmean_anchors(path='.\/data\/coco128.yaml', n=9, img_size=640, thr=4.0, gen=1000, verbose=Tr/;"	f
labels_to_class_weights	algorithms/Yolov5/utils/utils.py	/^def labels_to_class_weights(labels, nc=80):$/;"	f
labels_to_image_weights	algorithms/Yolov5/utils/utils.py	/^def labels_to_image_weights(labels, nc=80, class_weights=np.ones(80)):$/;"	f
lambda_loss	algorithms/RmFog/test.py	/^lambda_loss = args.lambda_loss$/;"	v
lambda_loss	algorithms/RmFog/train.py	/^lambda_loss = args.lambda_loss$/;"	v
last	algorithms/Yolov5/train.py	/^last = wdir + 'last.pt'$/;"	v
learning_rate	algorithms/RmFog/train.py	/^learning_rate = args.learning_rate$/;"	v
letterbox	algorithms/Yolov5/utils/datasets.py	/^def letterbox(img, new_shape=(640, 640), color=(114, 114, 114), auto=True, scaleFill=False, scal/;"	f
lf	algorithms/Yolov5/Yolov5_train.py	/^    lf = lambda x: (((1 + math.cos(x * math.pi \/ epochs)) \/ 2) ** 1.0) * 0.9 + 0.1  # cosine$/;"	f	function:train	file:
lf	algorithms/Yolov5/train.py	/^    lf = lambda x: (((1 + math.cos(x * math.pi \/ epochs)) \/ 2) ** 1.0) * 0.9 + 0.1  # cosine$/;"	f	function:train	file:
lightweight	main.py	/^    def lightweight(self):$/;"	m	class:MyWindow
limits	algorithms/Yolov5/train.py	/^            limits = [(1e-5, 1e-2), (0.00, 0.70), (0.60, 0.98), (0, 0.001), (0, .9), (0, .9), (0/;"	v
load_classifier	algorithms/Yolov5/utils/torch_utils.py	/^def load_classifier(name='resnet101', n=2):$/;"	f
load_image	algorithms/Yolov5/utils/datasets.py	/^def load_image(self, index):$/;"	f
load_mosaic	algorithms/Yolov5/utils/datasets.py	/^def load_mosaic(self, index):$/;"	f
loss	algorithms/RmFog/train.py	/^        loss = smooth_loss + lambda_loss*perceptual_loss$/;"	v
loss_network	algorithms/RmFog/train.py	/^loss_network = LossNetwork(vgg_model)$/;"	v
lowlight	algorithms/ZeroDCE/lowlight_test.py	/^def lowlight(image_path):$/;"	f
lowlight_loader	algorithms/ZeroDCE/dataloader.py	/^class lowlight_loader(data.Dataset):$/;"	c
lr_scheduler	algorithms/Yolov5/Yolov5_train.py	/^import torch.optim.lr_scheduler as lr_scheduler$/;"	I	nameref:module:torch.optim.lr_scheduler
lr_scheduler	algorithms/Yolov5/train.py	/^import torch.optim.lr_scheduler as lr_scheduler$/;"	I	nameref:module:torch.optim.lr_scheduler
make_divisible	algorithms/Yolov5/utils/utils.py	/^def make_divisible(x, divisor):$/;"	f
metric	algorithms/Yolov5/utils/utils.py	/^    def metric(k):  # compute metric$/;"	f	function:check_anchors	file:
metric	algorithms/Yolov5/utils/utils.py	/^    def metric(k, wh):  # compute metrics$/;"	f	function:kmean_anchors	file:
mixed_precision	algorithms/Yolov5/train.py	/^        mixed_precision = False$/;"	v
mixed_precision	algorithms/Yolov5/train.py	/^    mixed_precision = False  # not installed$/;"	v
mixed_precision	algorithms/Yolov5/train.py	/^mixed_precision = True$/;"	v
model	algorithms/Yolov5/models/onnx_export.py	/^    model = onnx.load(f)  # load onnx model$/;"	v
model	algorithms/Yolov5/models/onnx_export.py	/^    model = torch.load(opt.weights, map_location=torch.device('cpu'))['model'].float()$/;"	v
model	algorithms/Yolov5/models/yolo.py	/^    model = Model(opt.cfg).to(device)$/;"	v
model_cfg	algorithms/Yolov5/Yolov5_train.py	/^    model_cfg = 'models\/yolov5s.yaml'$/;"	v
model_info	algorithms/Yolov5/utils/torch_utils.py	/^def model_info(model, verbose=False):$/;"	f
models	algorithms/Yolov5/utils/torch_utils.py	/^import torchvision.models as models$/;"	I	nameref:module:torchvision.models
mp	algorithms/Yolov5/train.py	/^                mp, s = 0.9, 0.2  # mutation probability, sigma$/;"	v
myWin	main.py	/^    myWin = MyWindow()$/;"	v
n	algorithms/Yolov5/train.py	/^                n = min(5, len(x))  # number of previous results to consider$/;"	v
net	algorithms/RmFog/test.py	/^net = GridDehazeNet(height=network_height, width=network_width, num_dense_layer=num_dense_layer,/;"	v
net	algorithms/RmFog/test.py	/^net = net.to(device)$/;"	v
net	algorithms/RmFog/test.py	/^net = nn.DataParallel(net, device_ids=device_ids)$/;"	v
net	algorithms/RmFog/train.py	/^net = GridDehazeNet(height=network_height, width=network_width, num_dense_layer=num_dense_layer,/;"	v
net	algorithms/RmFog/train.py	/^net = net.to(device)$/;"	v
net	algorithms/RmFog/train.py	/^net = nn.DataParallel(net, device_ids=device_ids)$/;"	v
network_height	algorithms/RmFog/test.py	/^network_height = args.network_height$/;"	v
network_height	algorithms/RmFog/train.py	/^network_height = args.network_height$/;"	v
network_width	algorithms/RmFog/test.py	/^network_width = args.network_width$/;"	v
network_width	algorithms/RmFog/train.py	/^network_width = args.network_width$/;"	v
new_full_file	algorithms/RmFog/pre.py	/^        new_full_file = os.path.join(new_path, file_new)$/;"	v
new_path	algorithms/RmFog/pre.py	/^new_path = '.\/data\/test\/SOTS\/outdoor\/hazy'$/;"	v
new_video	algorithms/Yolov5/utils/datasets.py	/^    def new_video(self, path):$/;"	m	class:LoadImages
ng	algorithms/Yolov5/train.py	/^                ng = len(g)$/;"	v
nms_class	algorithms/Yolov5/Yolov5_detect.py	/^def nms_class(test):$/;"	f
nn	algorithms/RmFog/model.py	/^import torch.nn as nn$/;"	I	nameref:module:torch.nn
nn	algorithms/RmFog/removefog.py	/^import torch.nn as nn$/;"	I	nameref:module:torch.nn
nn	algorithms/RmFog/residual_dense_block.py	/^import torch.nn as nn$/;"	I	nameref:module:torch.nn
nn	algorithms/RmFog/test.py	/^import torch.nn as nn$/;"	I	nameref:module:torch.nn
nn	algorithms/RmFog/train.py	/^import torch.nn as nn$/;"	I	nameref:module:torch.nn
nn	algorithms/Yolov5/utils/activations.py	/^import torch.nn as nn$/;"	I	nameref:module:torch.nn
nn	algorithms/Yolov5/utils/torch_utils.py	/^import torch.nn as nn$/;"	I	nameref:module:torch.nn
nn	algorithms/Yolov5/utils/utils.py	/^import torch.nn as nn$/;"	I	nameref:module:torch.nn
nn	algorithms/ZeroDCE/Myloss.py	/^import torch.nn as nn$/;"	I	nameref:module:torch.nn
nn	algorithms/ZeroDCE/dce_model.py	/^import torch.nn as nn$/;"	I	nameref:module:torch.nn
nn	algorithms/ZeroDCE/lowlight_test.py	/^import torch.nn as nn$/;"	I	nameref:module:torch.nn
nn	algorithms/ZeroDCE/lowlight_train.py	/^import torch.nn as nn$/;"	I	nameref:module:torch.nn
non_max_suppression	algorithms/Yolov5/utils/utils.py	/^def non_max_suppression(prediction, conf_thres=0.1, iou_thres=0.6, merge=False, classes=None, ag/;"	f
np	algorithms/RmFog/model.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	algorithms/Yolov5/utils/datasets.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	algorithms/Yolov5/utils/utils.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	algorithms/ZeroDCE/Myloss.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	algorithms/ZeroDCE/dataloader.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	algorithms/ZeroDCE/dce_model.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	algorithms/ZeroDCE/lowlight_test.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	algorithms/ZeroDCE/lowlight_train.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	funlibs.py	/^import numpy as np$/;"	I	nameref:module:numpy
npr	algorithms/Yolov5/train.py	/^                npr = np.random$/;"	v
num_dense_layer	algorithms/RmFog/test.py	/^num_dense_layer = args.num_dense_layer$/;"	v
num_dense_layer	algorithms/RmFog/train.py	/^num_dense_layer = args.num_dense_layer$/;"	v
num_epochs	algorithms/RmFog/train.py	/^    num_epochs = 10$/;"	v
num_epochs	algorithms/RmFog/train.py	/^    num_epochs = 100$/;"	v
old_val_psnr	algorithms/RmFog/train.py	/^        old_val_psnr = val_psnr$/;"	v
old_val_psnr	algorithms/RmFog/train.py	/^old_val_psnr, old_val_ssim = validation(net, val_data_loader, device, category)$/;"	v
old_val_ssim	algorithms/RmFog/train.py	/^old_val_psnr, old_val_ssim = validation(net, val_data_loader, device, category)$/;"	v
onclick	main.py	/^    def onclick(self, option):$/;"	m	class:MyWindow
onclick	ui/trainParasMain.py	/^    def onclick(self, option):$/;"	m	class:TrainWindow
one_epoch_time	algorithms/RmFog/train.py	/^    one_epoch_time = time.time() - start_time$/;"	v
openfile	main.py	/^    def openfile(self):$/;"	m	class:MyWindow
opt	algorithms/Yolov5/detect.py	/^    opt = parser.parse_args()$/;"	v
opt	algorithms/Yolov5/models/onnx_export.py	/^    opt = parser.parse_args()$/;"	v
opt	algorithms/Yolov5/models/yolo.py	/^    opt = parser.parse_args()$/;"	v
opt	algorithms/Yolov5/test.py	/^    opt = parser.parse_args()$/;"	v
opt	algorithms/Yolov5/train.py	/^    opt = parser.parse_args()$/;"	v
optim	algorithms/Yolov5/Yolov5_train.py	/^import torch.optim as optim$/;"	I	nameref:module:torch.optim
optim	algorithms/Yolov5/train.py	/^import torch.optim as optim$/;"	I	nameref:module:torch.optim
optimizer	algorithms/RmFog/train.py	/^optimizer = torch.optim.Adam(net.parameters(), lr=learning_rate)$/;"	v
outputWritten	main.py	/^    def outputWritten(self, text):$/;"	m	class:MyWindow
output_features	algorithms/RmFog/perceptual.py	/^    def output_features(self, x):$/;"	m	class:LossNetwork
output_to_target	algorithms/Yolov5/utils/utils.py	/^def output_to_target(output, width, height):$/;"	f
pack_pyd	setup.py	/^def pack_pyd():$/;"	f
parent	algorithms/Yolov5/train.py	/^                parent = 'single'  # parent selection method: 'single' or 'weighted'$/;"	v
parent_path	setup.py	/^parent_path = sys.argv[1] if len(sys.argv) > 1 else ""$/;"	v
parse_model	algorithms/Yolov5/models/yolo.py	/^def parse_model(md, ch):  # model_dict, input_channels(3)$/;"	f
parser	algorithms/RmFog/test.py	/^parser = argparse.ArgumentParser(description='Hyper-parameters for GridDehazeNet')$/;"	v
parser	algorithms/RmFog/train.py	/^parser = argparse.ArgumentParser(description='Hyper-parameters for GridDehazeNet')$/;"	v
parser	algorithms/Yolov5/detect.py	/^    parser = argparse.ArgumentParser()$/;"	v
parser	algorithms/Yolov5/models/onnx_export.py	/^    parser = argparse.ArgumentParser()$/;"	v
parser	algorithms/Yolov5/models/yolo.py	/^    parser = argparse.ArgumentParser()$/;"	v
parser	algorithms/Yolov5/test.py	/^    parser = argparse.ArgumentParser(prog='test.py')$/;"	v
parser	algorithms/Yolov5/train.py	/^    parser = argparse.ArgumentParser()$/;"	v
parser	algorithms/ZeroDCE/lowlight_train.py	/^    parser = argparse.ArgumentParser()$/;"	v
path	algorithms/RmFog/pre.py	/^path = '.\/data\/test\/SOTS\/outdoor\/clear'  $/;"	v
perception_loss	algorithms/ZeroDCE/Myloss.py	/^class perception_loss(nn.Module):$/;"	c
perceptual_loss	algorithms/RmFog/train.py	/^        perceptual_loss = loss_network(dehaze, gt)$/;"	v
plot_evolution_results	algorithms/Yolov5/utils/utils.py	/^def plot_evolution_results(hyp):  # from utils.utils import *; plot_evolution_results(hyp)$/;"	f
plot_images	algorithms/Yolov5/utils/utils.py	/^def plot_images(images, targets, paths=None, fname='images.jpg', names=None, max_size=640, max_s/;"	f
plot_labels	algorithms/Yolov5/utils/utils.py	/^def plot_labels(labels):$/;"	f
plot_lr_scheduler	algorithms/Yolov5/utils/utils.py	/^def plot_lr_scheduler(optimizer, scheduler, epochs=300):$/;"	f
plot_one_box	algorithms/Yolov5/utils/utils.py	/^def plot_one_box(x, img, color=None, label=None, line_thickness=None):$/;"	f
plot_results	algorithms/Yolov5/utils/utils.py	/^def plot_results(start=0, stop=0, bucket='', id=(), labels=()):  # from utils.utils import *; pl/;"	f
plot_results_overlay	algorithms/Yolov5/utils/utils.py	/^def plot_results_overlay(start=0, stop=0):  # from utils.utils import *; plot_results_overlay()$/;"	f
plot_study_txt	algorithms/Yolov5/utils/utils.py	/^def plot_study_txt(f='study.txt', x=None):  # from utils.utils import *; plot_study_txt()$/;"	f
plot_targets_txt	algorithms/Yolov5/utils/utils.py	/^def plot_targets_txt():  # from utils.utils import *; plot_targets_txt()$/;"	f
plot_test_txt	algorithms/Yolov5/utils/utils.py	/^def plot_test_txt():  # from utils.utils import *; plot_test()$/;"	f
plot_wh_methods	algorithms/Yolov5/utils/utils.py	/^def plot_wh_methods():  # from utils.utils import *; plot_wh_methods()$/;"	f
plt	algorithms/RmFog/train.py	/^import matplotlib.pyplot as plt$/;"	I	nameref:module:matplotlib.pyplot
plt	algorithms/Yolov5/utils/utils.py	/^import matplotlib.pyplot as plt$/;"	I	nameref:module:matplotlib.pyplot
populate_train_list	algorithms/ZeroDCE/dataloader.py	/^def populate_train_list(lowlight_images_path):$/;"	f
pretrained	ui/trainParasMain.py	/^    def pretrained(self):$/;"	m	class:TrainWindow
print_log	algorithms/RmFog/utils.py	/^def print_log(epoch, num_epochs, one_epoch_time, train_psnr, val_psnr, val_ssim, category):$/;"	f
print_mutation	algorithms/Yolov5/utils/utils.py	/^def print_mutation(hyp, results, bucket=''):$/;"	f
print_results	algorithms/Yolov5/utils/utils.py	/^    def print_results(k):$/;"	f	function:kmean_anchors	file:
print_txt	funlibs.py	/^def print_txt(tableWidget, targets, result):$/;"	f
psnr_list	algorithms/RmFog/train.py	/^    psnr_list = []$/;"	v
pytorch_total_params	algorithms/RmFog/train.py	/^pytorch_total_params = sum(p.numel() for p in net.parameters() if p.requires_grad)$/;"	v
r	algorithms/Yolov5/test.py	/^                r, _, t = test(opt.data, weights, opt.batch_size, i, opt.conf_thres, opt.iou_thr/;"	v
random_affine	algorithms/Yolov5/utils/datasets.py	/^def random_affine(img, targets=(), degrees=10, translate=.1, scale=.1, shear=10, border=(0, 0)):$/;"	f
recursive_dataset2bmp	algorithms/Yolov5/utils/datasets.py	/^def recursive_dataset2bmp(dataset='..\/data\/sm4_bmp'):  # from utils.datasets import *; recursi/;"	f
reduce_img_size	algorithms/Yolov5/utils/datasets.py	/^def reduce_img_size(path='..\/data\/sm4\/images', img_size=1024):  # from utils.datasets import /;"	f
reset	main.py	/^    def reset(self, start=False):$/;"	m	class:MyWindow
results	algorithms/Yolov5/train.py	/^            results = train(hyp.copy())$/;"	v
results_file	algorithms/Yolov5/train.py	/^results_file = 'results.txt'$/;"	v
retranslateUi	ui/mainUI.py	/^    def retranslateUi(self, MainWindow):$/;"	m	class:Ui_MainWindow
retranslateUi	ui/trainParasUI.py	/^    def retranslateUi(self, Dialog):$/;"	m	class:Ui_Dialog
ridfog	main.py	/^    def ridfog(self):$/;"	m	class:MyWindow
ridfog_result	main.py	/^    def ridfog_result(self):$/;"	m	class:MyWindow
run	yoloThreads.py	/^    def run(self):$/;"	m	class:DetectThread
run	yoloThreads.py	/^    def run(self):$/;"	m	class:EnlightenWork
run	yoloThreads.py	/^    def run(self):$/;"	m	class:FogThread
run	yoloThreads.py	/^    def run(self):$/;"	m	class:OutputThread
s	algorithms/Yolov5/train.py	/^                mp, s = 0.9, 0.2  # mutation probability, sigma$/;"	v
s	setup.py	/^s = "# cython: language_level=3"$/;"	v
save_image	algorithms/RmFog/utils.py	/^def save_image(dehaze, image_name, category):$/;"	f
scale_coords	algorithms/Yolov5/utils/utils.py	/^def scale_coords(img1_shape, coords, img0_shape, ratio_pad=None):$/;"	f
scale_img	algorithms/Yolov5/utils/torch_utils.py	/^def scale_img(img, ratio=1.0, same_shape=False):  # img(16,3,256,416), r=ratio$/;"	f
select_data	ui/trainParasMain.py	/^    def select_data(self):$/;"	m	class:TrainWindow
select_device	algorithms/Yolov5/utils/torch_utils.py	/^def select_device(device='', apex=False, batch_size=None):$/;"	f
selectdata	main.py	/^    def selectdata(self):$/;"	m	class:MyWindow
settings	ui/trainParasMain.py	/^    def settings(self):$/;"	m	class:TrainWindow
setupUi	ui/mainUI.py	/^    def setupUi(self, MainWindow):$/;"	m	class:Ui_MainWindow
setupUi	ui/trainParasUI.py	/^    def setupUi(self, Dialog):$/;"	m	class:Ui_Dialog
setup_file	setup.py	/^setup_file = __file__.replace('\/', '\\\\')$/;"	v
showImages	funlibs.py	/^def showImages(widget, gridLayout, colums, rows, imgnamelist):$/;"	f
showtrain	main.py	/^    def showtrain(self):$/;"	m	class:MyWindow
signalForText	yoloThreads.py	/^    signalForText = pyqtSignal(str)$/;"	v	class:OutputThread
smooth_BCE	algorithms/Yolov5/utils/utils.py	/^def smooth_BCE(eps=0.1):  # https:\/\/github.com\/ultralytics\/yolov3\/issues\/238#issuecomment-/;"	f
smooth_loss	algorithms/RmFog/train.py	/^        smooth_loss = F.smooth_l1_loss(dehaze, gt)$/;"	v
start_time	algorithms/RmFog/test.py	/^start_time = time.time()$/;"	v
start_time	algorithms/RmFog/train.py	/^    start_time = time.time()$/;"	v
start_time	setup.py	/^start_time = time.time()$/;"	v
stoptrain	main.py	/^    def stoptrain(self):$/;"	m	class:MyWindow
strip_optimizer	algorithms/Yolov5/utils/utils.py	/^def strip_optimizer(f='weights\/best.pt'):  # from utils.utils import *; strip_optimizer()$/;"	f
t	algorithms/Yolov5/test.py	/^                r, _, t = test(opt.data, weights, opt.batch_size, i, opt.conf_thres, opt.iou_thr/;"	v
tb_writer	algorithms/Yolov5/train.py	/^        tb_writer = SummaryWriter(comment=opt.name)$/;"	v
test	algorithms/Yolov5/test.py	/^def test(data,$/;"	f
time_synchronized	algorithms/Yolov5/utils/torch_utils.py	/^def time_synchronized():$/;"	f
to_psnr	algorithms/RmFog/utils.py	/^def to_psnr(dehaze, gt):$/;"	f
to_ssim_skimage	algorithms/RmFog/utils.py	/^def to_ssim_skimage(dehaze, gt):$/;"	f
train	algorithms/Yolov5/Yolov5_train.py	/^def train(hyp, opt, outputqueue):$/;"	f
train	algorithms/Yolov5/train.py	/^def train(hyp):$/;"	f
train	algorithms/ZeroDCE/lowlight_train.py	/^def train(config):$/;"	f
train	main.py	/^    def train(self):$/;"	m	class:MyWindow
train0	algorithms/Yolov5/Yolov5_train.py	/^def train0(dataset_cfg, model_cfg, weights, batch_size, epochs, outputQueue=None):$/;"	f
train_batch_size	algorithms/RmFog/train.py	/^train_batch_size = args.train_batch_size$/;"	v
train_data_dir	algorithms/RmFog/train.py	/^    train_data_dir = '.\/data\/train\/indoor\/'$/;"	v
train_data_dir	algorithms/RmFog/train.py	/^    train_data_dir = '.\/data\/train\/outdoor\/'$/;"	v
train_data_loader	algorithms/RmFog/train.py	/^train_data_loader = DataLoader(TrainData(crop_size, train_data_dir), batch_size=train_batch_size/;"	v
train_psnr	algorithms/RmFog/train.py	/^    train_psnr = sum(psnr_list) \/ len(psnr_list)$/;"	v
txt_path	algorithms/RmFog/pre.py	/^txt_path = '.\/data\/test\/SOTS\/outdoor\/val_list.txt'$/;"	v
update	algorithms/Yolov5/utils/datasets.py	/^    def update(self, index, cap):$/;"	m	class:LoadStreams
update	algorithms/Yolov5/utils/torch_utils.py	/^    def update(self, model):$/;"	m	class:ModelEMA
update_attr	algorithms/Yolov5/utils/torch_utils.py	/^    def update_attr(self, model):$/;"	m	class:ModelEMA
utils	algorithms/RmFog/utils.py	/^import torchvision.utils as utils$/;"	I	nameref:module:torchvision.utils
v	algorithms/Yolov5/train.py	/^                    v = (g * (npr.random(ng) < mp) * npr.randn(ng) * npr.random() * s + 1).clip(/;"	v
v	algorithms/Yolov5/train.py	/^                v = np.ones(ng)$/;"	v
val_batch_size	algorithms/RmFog/test.py	/^val_batch_size = args.val_batch_size$/;"	v
val_batch_size	algorithms/RmFog/train.py	/^val_batch_size = args.val_batch_size$/;"	v
val_data_dir	algorithms/RmFog/test.py	/^    val_data_dir = '.\/data\/test\/SOTS\/indoor\/'$/;"	v
val_data_dir	algorithms/RmFog/test.py	/^    val_data_dir = '.\/data\/test\/SOTS\/outdoor\/'$/;"	v
val_data_dir	algorithms/RmFog/train.py	/^    val_data_dir = '.\/data\/test\/SOTS\/indoor\/'$/;"	v
val_data_dir	algorithms/RmFog/train.py	/^    val_data_dir = '.\/data\/test\/SOTS\/outdoor\/'$/;"	v
val_data_loader	algorithms/RmFog/test.py	/^val_data_loader = DataLoader(ValData(val_data_dir), batch_size=val_batch_size, shuffle=False, nu/;"	v
val_data_loader	algorithms/RmFog/train.py	/^val_data_loader = DataLoader(ValData(val_data_dir), batch_size=val_batch_size, shuffle=False, nu/;"	v
val_psnr	algorithms/RmFog/test.py	/^val_psnr, val_ssim = validation(net, val_data_loader, device, category, save_tag=True)$/;"	v
val_psnr	algorithms/RmFog/train.py	/^    val_psnr, val_ssim = validation(net, val_data_loader, device, category)$/;"	v
val_ssim	algorithms/RmFog/test.py	/^val_psnr, val_ssim = validation(net, val_data_loader, device, category, save_tag=True)$/;"	v
val_ssim	algorithms/RmFog/train.py	/^    val_psnr, val_ssim = validation(net, val_data_loader, device, category)$/;"	v
validation	algorithms/RmFog/utils.py	/^def validation(net, val_data_loader, device, category, save_tag=False):$/;"	f
vgg_model	algorithms/RmFog/train.py	/^vgg_model = vgg16(pretrained=True).features[:16]$/;"	v
vgg_model	algorithms/RmFog/train.py	/^vgg_model = vgg_model.to(device)$/;"	v
vid_formats	algorithms/Yolov5/utils/datasets.py	/^vid_formats = ['.mov', '.avi', '.mp4', '.mpg', '.mpeg', '.m4v', '.wmv', '.mkv']$/;"	v
w	algorithms/Yolov5/train.py	/^                w = fitness(x) - fitness(x).min()  # weights$/;"	v
wdir	algorithms/Yolov5/train.py	/^wdir = 'weights' + os.sep  # weights dir$/;"	v
weights	algorithms/Yolov5/Yolov5_train.py	/^    weights = ''$/;"	v
weights_init	algorithms/ZeroDCE/lowlight_train.py	/^def weights_init(m):$/;"	f
wh_iou	algorithms/Yolov5/utils/utils.py	/^def wh_iou(wh1, wh2):$/;"	f
write	yoloThreads.py	/^    def write(self, text):$/;"	m	class:OutputThread
x	algorithms/Yolov5/test.py	/^            x = list(range(352, 832, 64))  # x axis$/;"	v
x	algorithms/Yolov5/train.py	/^                    x = (x * w.reshape(n, 1)).sum(0) \/ w.sum()  # weighted combination$/;"	v
x	algorithms/Yolov5/train.py	/^                    x = x[random.choices(range(n), weights=w)[0]]  # weighted selection$/;"	v
x	algorithms/Yolov5/train.py	/^                x = np.loadtxt('evolve.txt', ndmin=2)$/;"	v
x	algorithms/Yolov5/train.py	/^                x = x[np.argsort(-fitness(x))][:n]  # top n mutations$/;"	v
xywh2xyxy	algorithms/Yolov5/utils/utils.py	/^def xywh2xyxy(x):$/;"	f
xyxy2xywh	algorithms/Yolov5/utils/utils.py	/^def xyxy2xywh(x):$/;"	f
y	algorithms/Yolov5/test.py	/^            y = []  # y axis$/;"	v
yolov5l	algorithms/Yolov5/hubconf.py	/^def yolov5l(pretrained=False, channels=3, classes=80):$/;"	f
yolov5m	algorithms/Yolov5/hubconf.py	/^def yolov5m(pretrained=False, channels=3, classes=80):$/;"	f
yolov5s	algorithms/Yolov5/hubconf.py	/^def yolov5s(pretrained=False, channels=3, classes=80):$/;"	f
yolov5x	algorithms/Yolov5/hubconf.py	/^def yolov5x(pretrained=False, channels=3, classes=80):$/;"	f
